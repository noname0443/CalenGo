// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/url"
	"strings"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	semconv "go.opentelemetry.io/otel/semconv/v1.19.0"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
)

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// DeleteAPIV1Note invokes delete-api-v1-note operation.
	//
	// Your POST endpoint.
	//
	// DELETE /api/v1/note
	DeleteAPIV1Note(ctx context.Context, request OptNote, params DeleteAPIV1NoteParams) (DeleteAPIV1NoteRes, error)
	// DeleteAPIV1User invokes delete-api-v1-user operation.
	//
	// Your POST endpoint.
	//
	// DELETE /api/v1/user
	DeleteAPIV1User(ctx context.Context, request OptUser, params DeleteAPIV1UserParams) (DeleteAPIV1UserRes, error)
	// GetAPIV1Note invokes get-api-v1-note operation.
	//
	// Your GET endpoint.
	//
	// GET /api/v1/note/{note}
	GetAPIV1Note(ctx context.Context, params GetAPIV1NoteParams) (GetAPIV1NoteRes, error)
	// GetAPIV1User invokes get-api-v1-user operation.
	//
	// Your GET endpoint.
	//
	// GET /api/v1/user/{user}
	GetAPIV1User(ctx context.Context, params GetAPIV1UserParams) (GetAPIV1UserRes, error)
	// ListAPIV1Note invokes list-api-v1-note operation.
	//
	// Your GET endpoint.
	//
	// GET /api/v1/note
	ListAPIV1Note(ctx context.Context, request OptListAPIV1NoteReq, params ListAPIV1NoteParams) (ListAPIV1NoteRes, error)
	// PostAPIV1Note invokes post-api-v1-note operation.
	//
	// Your POST endpoint.
	//
	// POST /api/v1/note
	PostAPIV1Note(ctx context.Context, request OptNote, params PostAPIV1NoteParams) (PostAPIV1NoteRes, error)
	// PostAPIV1User invokes post-api-v1-user operation.
	//
	// Your POST endpoint.
	//
	// POST /api/v1/user
	PostAPIV1User(ctx context.Context, request OptUser) (PostAPIV1UserRes, error)
	// PutAPIV1Note invokes put-api-v1-note operation.
	//
	// Your POST endpoint.
	//
	// PUT /api/v1/note
	PutAPIV1Note(ctx context.Context, request OptNote, params PutAPIV1NoteParams) (PutAPIV1NoteRes, error)
	// PutAPIV1User invokes put-api-v1-user operation.
	//
	// Your POST endpoint.
	//
	// PUT /api/v1/user
	PutAPIV1User(ctx context.Context, request OptUser, params PutAPIV1UserParams) (PutAPIV1UserRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

var _ Handler = struct {
	*Client
}{}

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// DeleteAPIV1Note invokes delete-api-v1-note operation.
//
// Your POST endpoint.
//
// DELETE /api/v1/note
func (c *Client) DeleteAPIV1Note(ctx context.Context, request OptNote, params DeleteAPIV1NoteParams) (DeleteAPIV1NoteRes, error) {
	res, err := c.sendDeleteAPIV1Note(ctx, request, params)
	return res, err
}

func (c *Client) sendDeleteAPIV1Note(ctx context.Context, request OptNote, params DeleteAPIV1NoteParams) (res DeleteAPIV1NoteRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("delete-api-v1-note"),
		semconv.HTTPMethodKey.String("DELETE"),
		semconv.HTTPRouteKey.String("/api/v1/note"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "DeleteAPIV1Note",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/api/v1/note"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeDeleteAPIV1NoteRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "EncodeCookieParams"
	cookie := uri.NewCookieEncoder(r)
	{
		// Encode "credentials" parameter.
		cfg := uri.CookieParameterEncodingConfig{
			Name:    "credentials",
			Explode: true,
		}

		if err := cookie.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.Credentials))
		}); err != nil {
			return res, errors.Wrap(err, "encode cookie")
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeDeleteAPIV1NoteResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteAPIV1User invokes delete-api-v1-user operation.
//
// Your POST endpoint.
//
// DELETE /api/v1/user
func (c *Client) DeleteAPIV1User(ctx context.Context, request OptUser, params DeleteAPIV1UserParams) (DeleteAPIV1UserRes, error) {
	res, err := c.sendDeleteAPIV1User(ctx, request, params)
	return res, err
}

func (c *Client) sendDeleteAPIV1User(ctx context.Context, request OptUser, params DeleteAPIV1UserParams) (res DeleteAPIV1UserRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("delete-api-v1-user"),
		semconv.HTTPMethodKey.String("DELETE"),
		semconv.HTTPRouteKey.String("/api/v1/user"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "DeleteAPIV1User",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/api/v1/user"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeDeleteAPIV1UserRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "EncodeCookieParams"
	cookie := uri.NewCookieEncoder(r)
	{
		// Encode "credentials" parameter.
		cfg := uri.CookieParameterEncodingConfig{
			Name:    "credentials",
			Explode: true,
		}

		if err := cookie.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.Credentials))
		}); err != nil {
			return res, errors.Wrap(err, "encode cookie")
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeDeleteAPIV1UserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAPIV1Note invokes get-api-v1-note operation.
//
// Your GET endpoint.
//
// GET /api/v1/note/{note}
func (c *Client) GetAPIV1Note(ctx context.Context, params GetAPIV1NoteParams) (GetAPIV1NoteRes, error) {
	res, err := c.sendGetAPIV1Note(ctx, params)
	return res, err
}

func (c *Client) sendGetAPIV1Note(ctx context.Context, params GetAPIV1NoteParams) (res GetAPIV1NoteRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("get-api-v1-note"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/api/v1/note/{note}"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "GetAPIV1Note",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/note/"
	{
		// Encode "note" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "note",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.Note))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "EncodeCookieParams"
	cookie := uri.NewCookieEncoder(r)
	{
		// Encode "credentials" parameter.
		cfg := uri.CookieParameterEncodingConfig{
			Name:    "credentials",
			Explode: true,
		}

		if err := cookie.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.Credentials))
		}); err != nil {
			return res, errors.Wrap(err, "encode cookie")
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeGetAPIV1NoteResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetAPIV1User invokes get-api-v1-user operation.
//
// Your GET endpoint.
//
// GET /api/v1/user/{user}
func (c *Client) GetAPIV1User(ctx context.Context, params GetAPIV1UserParams) (GetAPIV1UserRes, error) {
	res, err := c.sendGetAPIV1User(ctx, params)
	return res, err
}

func (c *Client) sendGetAPIV1User(ctx context.Context, params GetAPIV1UserParams) (res GetAPIV1UserRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("get-api-v1-user"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/api/v1/user/{user}"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "GetAPIV1User",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/user/"
	{
		// Encode "user" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "user",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.User))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "EncodeCookieParams"
	cookie := uri.NewCookieEncoder(r)
	{
		// Encode "credentials" parameter.
		cfg := uri.CookieParameterEncodingConfig{
			Name:    "credentials",
			Explode: true,
		}

		if err := cookie.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.Credentials))
		}); err != nil {
			return res, errors.Wrap(err, "encode cookie")
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeGetAPIV1UserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// ListAPIV1Note invokes list-api-v1-note operation.
//
// Your GET endpoint.
//
// GET /api/v1/note
func (c *Client) ListAPIV1Note(ctx context.Context, request OptListAPIV1NoteReq, params ListAPIV1NoteParams) (ListAPIV1NoteRes, error) {
	res, err := c.sendListAPIV1Note(ctx, request, params)
	return res, err
}

func (c *Client) sendListAPIV1Note(ctx context.Context, request OptListAPIV1NoteReq, params ListAPIV1NoteParams) (res ListAPIV1NoteRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("list-api-v1-note"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/api/v1/note"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "ListAPIV1Note",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/api/v1/note"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeListAPIV1NoteRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "EncodeCookieParams"
	cookie := uri.NewCookieEncoder(r)
	{
		// Encode "credentials" parameter.
		cfg := uri.CookieParameterEncodingConfig{
			Name:    "credentials",
			Explode: true,
		}

		if err := cookie.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.Credentials))
		}); err != nil {
			return res, errors.Wrap(err, "encode cookie")
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeListAPIV1NoteResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PostAPIV1Note invokes post-api-v1-note operation.
//
// Your POST endpoint.
//
// POST /api/v1/note
func (c *Client) PostAPIV1Note(ctx context.Context, request OptNote, params PostAPIV1NoteParams) (PostAPIV1NoteRes, error) {
	res, err := c.sendPostAPIV1Note(ctx, request, params)
	return res, err
}

func (c *Client) sendPostAPIV1Note(ctx context.Context, request OptNote, params PostAPIV1NoteParams) (res PostAPIV1NoteRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("post-api-v1-note"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/api/v1/note"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "PostAPIV1Note",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/api/v1/note"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePostAPIV1NoteRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "EncodeCookieParams"
	cookie := uri.NewCookieEncoder(r)
	{
		// Encode "credentials" parameter.
		cfg := uri.CookieParameterEncodingConfig{
			Name:    "credentials",
			Explode: true,
		}

		if err := cookie.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.Credentials))
		}); err != nil {
			return res, errors.Wrap(err, "encode cookie")
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodePostAPIV1NoteResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PostAPIV1User invokes post-api-v1-user operation.
//
// Your POST endpoint.
//
// POST /api/v1/user
func (c *Client) PostAPIV1User(ctx context.Context, request OptUser) (PostAPIV1UserRes, error) {
	res, err := c.sendPostAPIV1User(ctx, request)
	return res, err
}

func (c *Client) sendPostAPIV1User(ctx context.Context, request OptUser) (res PostAPIV1UserRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("post-api-v1-user"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/api/v1/user"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "PostAPIV1User",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/api/v1/user"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePostAPIV1UserRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodePostAPIV1UserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutAPIV1Note invokes put-api-v1-note operation.
//
// Your POST endpoint.
//
// PUT /api/v1/note
func (c *Client) PutAPIV1Note(ctx context.Context, request OptNote, params PutAPIV1NoteParams) (PutAPIV1NoteRes, error) {
	res, err := c.sendPutAPIV1Note(ctx, request, params)
	return res, err
}

func (c *Client) sendPutAPIV1Note(ctx context.Context, request OptNote, params PutAPIV1NoteParams) (res PutAPIV1NoteRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("put-api-v1-note"),
		semconv.HTTPMethodKey.String("PUT"),
		semconv.HTTPRouteKey.String("/api/v1/note"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "PutAPIV1Note",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/api/v1/note"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutAPIV1NoteRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "EncodeCookieParams"
	cookie := uri.NewCookieEncoder(r)
	{
		// Encode "credentials" parameter.
		cfg := uri.CookieParameterEncodingConfig{
			Name:    "credentials",
			Explode: true,
		}

		if err := cookie.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.Credentials))
		}); err != nil {
			return res, errors.Wrap(err, "encode cookie")
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodePutAPIV1NoteResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PutAPIV1User invokes put-api-v1-user operation.
//
// Your POST endpoint.
//
// PUT /api/v1/user
func (c *Client) PutAPIV1User(ctx context.Context, request OptUser, params PutAPIV1UserParams) (PutAPIV1UserRes, error) {
	res, err := c.sendPutAPIV1User(ctx, request, params)
	return res, err
}

func (c *Client) sendPutAPIV1User(ctx context.Context, request OptUser, params PutAPIV1UserParams) (res PutAPIV1UserRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("put-api-v1-user"),
		semconv.HTTPMethodKey.String("PUT"),
		semconv.HTTPRouteKey.String("/api/v1/user"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "PutAPIV1User",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/api/v1/user"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodePutAPIV1UserRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "EncodeCookieParams"
	cookie := uri.NewCookieEncoder(r)
	{
		// Encode "credentials" parameter.
		cfg := uri.CookieParameterEncodingConfig{
			Name:    "credentials",
			Explode: true,
		}

		if err := cookie.EncodeParam(cfg, func(e uri.Encoder) error {
			return e.EncodeValue(conv.StringToString(params.Credentials))
		}); err != nil {
			return res, errors.Wrap(err, "encode cookie")
		}
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodePutAPIV1UserResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
