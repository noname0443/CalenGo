// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// DeleteAPIV1Note implements delete-api-v1-note operation.
	//
	// Your POST endpoint.
	//
	// DELETE /api/v1/note
	DeleteAPIV1Note(ctx context.Context, req OptNote) (DeleteAPIV1NoteRes, error)
	// DeleteAPIV1User implements delete-api-v1-user operation.
	//
	// Your POST endpoint.
	//
	// DELETE /api/v1/user
	DeleteAPIV1User(ctx context.Context, req OptUser) (DeleteAPIV1UserRes, error)
	// GetAPIV1Note implements get-api-v1-note operation.
	//
	// Your GET endpoint.
	//
	// GET /api/v1/note/{note}
	GetAPIV1Note(ctx context.Context, params GetAPIV1NoteParams) (GetAPIV1NoteRes, error)
	// GetAPIV1User implements get-api-v1-user operation.
	//
	// Your GET endpoint.
	//
	// GET /api/v1/user/{user}
	GetAPIV1User(ctx context.Context, params GetAPIV1UserParams) (GetAPIV1UserRes, error)
	// ListAPIV1Note implements list-api-v1-note operation.
	//
	// Your GET endpoint.
	//
	// PATCH /api/v1/note
	ListAPIV1Note(ctx context.Context, req OptListAPIV1NoteReq) (ListAPIV1NoteRes, error)
	// PostAPIV1Note implements post-api-v1-note operation.
	//
	// Your POST endpoint.
	//
	// POST /api/v1/note
	PostAPIV1Note(ctx context.Context, req OptNote) (PostAPIV1NoteRes, error)
	// PostAPIV1User implements post-api-v1-user operation.
	//
	// Your POST endpoint.
	//
	// POST /api/v1/user
	PostAPIV1User(ctx context.Context, req OptUser) (PostAPIV1UserRes, error)
	// PutAPIV1Note implements put-api-v1-note operation.
	//
	// Your POST endpoint.
	//
	// PUT /api/v1/note
	PutAPIV1Note(ctx context.Context, req OptNote) (PutAPIV1NoteRes, error)
	// PutAPIV1User implements put-api-v1-user operation.
	//
	// Your POST endpoint.
	//
	// PUT /api/v1/user
	PutAPIV1User(ctx context.Context, req OptUser) (PutAPIV1UserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
